# vim: syntax=sql
[auto_discovery_1000]
minutes: 1000
expu.lld: select '' "{#PDB}", username "{#USERNAME}"
            from dba_users s
            where account_status IN ( 'OPEN', 'EXPIRED(GRACE)' )
            and expiry_date > sysdate
            and expiry_date < (sysdate + 30)
ustat.lld: select '' "{#PDB}", account_status "{#STATUS}"
            from dba_users
            group by account_status
[auto_discovery_60]
minutes: 60
inst.lld: select distinct inst_name "{#INST_NAME}"
            from (select inst_name from v$active_instances 
                  union
                  select instance_name from gv$instance)
db.lld: select name "{#PDB}" from v$database
parm.lld: select i.instance_name "{#INST_NAME}", p.name "{#PARAMETER}"
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
p_ts.lld: select tablespace_name "{#TS_NAME}", '' "{#PDB}"
            from dba_tablespaces where contents = 'PERMANENT'
t_ts.lld: select tablespace_name "{#TS_NAME}", '' "{#PDB}"
            from dba_tablespaces where contents = 'TEMPORARY'
u_ts.lld: select tablespace_name "{#TS_NAME}", '' "{#PDB}"
            from dba_tablespaces where contents = 'UNDO'
service.lld: select '' "{#PDB}", i.instance_name "{#INST_NAME}", s.name "{#SERVICE_NAME}"
               from gv$services s join gv$instance i
                 on (   s.inst_id = i.inst_id)
rman.lld: select distinct(object_type) "{#OBJ_TYPE}" from v$rman_status where operation like 'BACKUP%'
arl_dest.lld: select i.instance_name "{#INST_NAME}",d.dest_name "{#ARL_DEST}"
            from gv$archive_dest d
            , gv$instance i
            , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and   db.log_mode = 'ARCHIVELOG'
[startup]
minutes: 0
version: select 'inst['||instance_name||',version]', version from gv$instance
lastpatch: select  'db[last_patch_hist]', ACTION||':'||NAMESPACE||':'||VERSION||':'||ID||':'||COMMENTS
        from sys.registry$history
        where action_time = (select max(action_time) from sys.registry$history)

[checks_01m]
minutes: 1
inst.uptime: select 'inst['||instance_name||',uptime]' key,(sysdate -startup_time)*60*60*24 val from gv$instance
db.openmode: select 'db['||name||',openstatus]', decode(open_mode,'MOUNTED',1,'READ ONLY',2,'READ WRITE',3,0) from v$database
scn: select 'db[current_scn]', current_scn from v$database
     union all
     select 'db[delta_scn]', current_scn from v$database
blocked: select 'blocked[topsid]', topsid||'('||blocked||')'
          from (
          select final_blocking_instance||'/'||final_blocking_session topsid, count(*) blocked
          from gv$session
          where  FINAL_BLOCKING_SESSION_STATUS='VALID'
          group by final_blocking_instance||'/'||final_blocking_session
          order by 2 desc, 1
          )
          where rownum < 2
          union all
          select 'blocked[count]', ''||count(*)
           from gv$session 
           where  FINAL_BLOCKING_SESSION_STATUS='VALID'
[checks_05m]
minutes: 5
parm.val:  select 'parm['||i.instance_name||','||p.name||',value]' key, p.value
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
            and   upper(p.description) not like '%SIZE%'
            union all
            select 'parm['||i.instance_name||','||p.name||',size]' key, p.value
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
            and   upper(p.description) like '%SIZE%'
service.cnt: select 'service[,'||i.instance_name||','|| s.service_name||',sess]' ,count(*)
               from gv$session s join gv$instance i
                 on (   s.inst_id = i.inst_id)
                 group by i.instance_name, s.service_name

u_ts:    select   'undo_tbs[{#PDB},' || tablespace_name || ',' ||
                 case
                    when k = 1 then 'filesize]'
                    when k = 2 then 'maxsize]'
                    when k = 3 then 'usedbytes]'
                    when k = 4 then 'pctfree]'
                    when k = 5 then 'pctfreeMAX]'
                 end key,
                 case
                    when k = 1 then file_size
                    when k = 2 then file_max_size
                    when k = 3 then file_used_space
                    when k = 4 then round((file_size-file_used_space)/file_size*100,2)
                    when k = 5 then round((file_size-file_used_space)/file_max_size*100,2)
                 end value
         from  (
              select t1.tablespace_name,
                     t1.file_size,
                     t1.file_max_size,
                     case
                        when t1.retention = 'GUARANTEE' then nvl(t2.active_file_used_space,0)+nvl(t2.unexpired_file_used_space,0)
                        when t1.retention = 'NOGUARANTEE' then nvl(t2.active_file_used_space,0)
                     end file_used_space                                
              from   (
                     select     t.tablespace_name,
                                t.retention,
                                round(sum(f.bytes)) file_size,
                                round(sum(
                                         case
                                            when f.autoextensible = 'NO' then f.bytes
                                            else greatest(f.bytes,f.maxbytes)
                                         end
                                         )
                                     ) file_max_size
                     from       dba_data_files f,
                                dba_tablespaces t
                     where      t.contents = 'UNDO'
                     and        t.tablespace_name = f.tablespace_name
                     group by   t.tablespace_name,
                                t.retention
                     ) t1,
                     (
                     select *
                     from   (
                            select tablespace_name,
                                   status,
                                   bytes
                                   from   dba_undo_extents
                            )
                     pivot  (
                            sum(bytes) as file_used_space
                            for status in ('UNEXPIRED' as unexpired, 'EXPIRED' as expired, 'ACTIVE' as active)
                            )
                     ) t2
              where  t1.tablespace_name = t2.tablespace_name(+)
              )
              cross join
              (
              select     level k
              from       dual
              connect by level <= 5
              ) k

t_ts: select   't_ts[,'||t.TABLESPACE||',filesize]', t.totalspace
    from (select   round (sum (d.bytes))  AS totalspace,
                   round (sum ( case when maxbytes < bytes then bytes else maxbytes end)) max_bytes,
									 d.tablespace_name tablespace
              from dba_temp_files d
          group by d.tablespace_name) t
   union all
   select   't_ts[,'||t.TABLESPACE_name||',maxsize]', sum(maxbytes)
        from (select case when autoextensible = 'NO'
                               then bytes
                     else
                      case when bytes > maxbytes
                               then bytes
                      else          maxbytes
                      end
                     end maxbytes, tablespace_name
                from dba_temp_files) f
            , dba_tablespaces t
       where t.contents = 'TEMPORARY'
         and  t.tablespace_name = f.tablespace_name
       group by t.tablespace_name
  union all
  select 't_ts[,'||t.tablespace_name||',usedbytes]', nvl(sum(u.blocks*t.block_size),0) bytes
    from gv$sort_usage u right join
       dba_tablespaces t
           on ( u.tablespace = t.tablespace_name)
             where   t.contents = 'TEMPORARY'
               group by t.tablespace_name
  union all
  select   't_ts[,'||t.TABLESPACE_name||',pctfree]', round(((t.totalspace - nvl(u.usedbytes,0))/t.totalspace)*100,2) "PCTFREE"
    from (select   round (sum (d.bytes))  AS totalspace,
                   round (sum ( case when maxbytes < bytes then bytes else maxbytes end)) max_bytes,
                   d.tablespace_name
              from dba_temp_files d
          group by d.tablespace_name) t
      left join (
                        select u.tablespace tablespace_name, round(sum(u.blocks*t.block_size)) usedbytes
                        from gv$sort_usage u
                        , dba_tablespaces t
                        where u.tablespace = t.tablespace_name
                        and   t.contents = 'TEMPORARY'
                        group by tablespace
                 )u
           on t.tablespace_name = u.tablespace_name
  union all
  select   't_ts[,'||t.TABLESPACE_name||',pctfreeMAX]', round(((t.max_bytes - nvl(u.usedbytes,0))/t.max_bytes)*100,2) "PCTFREEmax"
    from (select   round (sum (d.bytes))  AS totalspace,
                   round (sum ( case when maxbytes < bytes then bytes else maxbytes end)) max_bytes,
                   d.tablespace_name
              from dba_temp_files d
          group by d.tablespace_name) t
      left join (
                        select u.tablespace tablespace_name, round(sum(u.blocks*t.block_size)) usedbytes
                        from gv$sort_usage u
                        , dba_tablespaces t
                        where u.tablespace = t.tablespace_name
                        and   t.contents = 'TEMPORARY'
                        group by tablespace
                 )u
           on t.tablespace_name = u.tablespace_name

arl_dest: select 'arl_dest['|| i.instance_name||','||d.dest_name||',status]', ''||decode (d.status,'VALID',0,'DEFERRED',1,'ERROR',2,3)
            from gv$archive_dest d
            , gv$instance i
            , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and db.log_mode = 'ARCHIVELOG'
          union all
          select 'arl_dest['|| i.instance_name||','||d.dest_name||',sequence]', ''||d.log_sequence
            from gv$archive_dest d
            , gv$instance i
            , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and db.log_mode = 'ARCHIVELOG'
          union all
          select 'arl_dest['|| i.instance_name||','||d.dest_name||',error]', '"'||d.error||'"'
            from gv$archive_dest d
            , gv$instance i
                , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and db.log_mode = 'ARCHIVELOG'

fra: select 'fra[limit]', space_limit from v$recovery_file_dest def
      union all
     select 'fra[used]', space_used from v$recovery_file_dest def
      union all
     select 'fra[reclaimable]', space_reclaimable from v$recovery_file_dest def
      union all
     select 'fra[files]', number_of_files from v$recovery_file_dest def
[checks_20m]
minutes: 20
rman: with stats as (
        select r.object_type, r.operation, r.start_time, r.end_time, r.status
               ,max(start_time) over (partition by  r.object_type, r.operation) max_start
               , input_bytes, output_bytes
        from v$rman_status r
        where r.row_type = 'COMMAND'
        and   not r.object_type is null
        and   r.operation like 'BACKUP%'
        )
        , types as (
        select 'ARCHIVELOG' object_type from dual
        union all
        select 'CONTROLFILE' from dual
        union all
        select 'SPFILE' from dual
        union all
        select 'DB INCR' from dual
        union all
        select 'DB FULL' from dual
        union all
        select 'RECVR AREA' from dual
        )
        , data as (
        select t.object_type, s.start_time, nvl(s.status,'noinfo') status, round(nvl((s.end_time - s.start_time),0)*24*60*60) elapsed
        , nvl(input_bytes,0) input_bytes, nvl(output_bytes,0) output_bytes
        from types t left outer join
             stats s on (s.object_type = t.object_type)
        where nvl(s.start_time,sysdate) = nvl(s.max_start,sysdate)
        )
        select '"rman['||object_type||',status]"', ''||decode(status,'COMPLETED',0,
                                               'FAILED',   1,
                                               'COMPLETED WITH WARNINGS',2,
                                               'COMPLETED WITH ERRORS',  3,
                                               'noinfo',                 4,
                                               'RUNNING',                5,
                                               9) status
        from data
        union all
        select '"rman['||object_type||',ela]"',''||elapsed
        from data
        union all
        select '"rman['||object_type||',input]"',''||input_bytes
        from data
        union all
        select '"rman['||object_type||',output]"',''||output_bytes
        from data
        union all
        select '"rman['||object_type||',age]"',''||round((sysdate - nvl(start_time,sysdate))*24*3600) age
        from data
        union all select 'rman[bct,status]', ''||decode(status,'ENABLED',0,'DISABLED',1,2) from v$block_change_tracking
        union all select 'rman[bct,file]', filename from v$block_change_tracking
        union all select 'rman[bct,bytes]', ''||nvl(bytes,0) from v$block_change_tracking
[checks_60m]
minutes: 60
p_ts: SELECT   'p_ts[,'||tablespace_name||','||
           CASE
             WHEN k = 1 THEN 'filesize]'
             WHEN k = 2 THEN 'maxsize]'
             WHEN k = 3 THEN 'usedbytes]'
             WHEN k = 4 THEN 'pctfree]'
             WHEN k = 5 THEN 'pctfreeMAX]'
           END key
  ,        CASE
           WHEN k = 1 THEN file_size
           WHEN k = 2 THEN file_max_size
           WHEN k = 3 THEN file_size - file_free_space
           WHEN k = 4 THEN ROUND(file_free_space / file_size * 100,2)
           WHEN k = 5 THEN ROUND((file_free_space + (file_max_size - file_size)) / file_max_size * 100,2)
           END value
  FROM   ( --
         select t1.tablespace_name,
               t1.file_size,
               t1.file_max_size,
               t2.file_free_space
          from (  select t.tablespace_name, sum (f.bytes) file_size, sum (case when f.autoextensible = 'NO' then f.bytes else greatest (f.bytes, f.maxbytes) end) file_max_size
                    from dba_tablespaces t, dba_data_files f
                   where t.CONTENTS = 'PERMANENT' and f.tablespace_name = t.tablespace_name
                group by t.tablespace_name) t1,
               (  select f.tablespace_name, sum (f.bytes) file_free_space
                    from dba_free_space f
                group by tablespace_name) t2
         where t1.tablespace_name = t2.tablespace_name(+)
       )
  cross JOIN   ( SELECT LEVEL k FROM dual CONNECT BY LEVEL <= 5 ) k
expu: select 'expu[,'|| username||',expiring]' key, (expiry_date - sysdate)*24*3600 value
	from dba_users s
	where account_status IN ( 'OPEN', 'EXPIRED(GRACE)' )
	-- and expiry_date > sysdate
	-- and expiry_date < (sysdate + 30)
  union all
  select '"ustat[,'||account_status||',count]"' key, count(*) value
  from dba_users
  group by account_status
alertlog: select 'inst['||i.instance_name||',log]', d.value||'/alert_'||i.instance_name||'.log' from gv$instance i, gv$diag_info d
           where i.inst_id = d.inst_id and d.name = 'Diag Trace'
[checks_720m]
minutes: 720
version: select 'inst['||instance_name||',version]', version from gv$instance
lastpatch: select  'db[last_patch_hist]', ACTION||':'||NAMESPACE||':'||VERSION||':'||ID||':'||COMMENTS
        from sys.registry$history
        where action_time = (select max(action_time) from sys.registry$history)
